{
  // Check JSON syntax compliance of this schema:
  //   $ jshint --extra-ext=json tool/data/config/config_schema.json

  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "http://qooxdoo.org",
  "title": "config.json",
  "type": "object",
  "properties": {
    "name": {
      "description": "A name / short description for the configuration file.",
      "type": "string"
    },
    "include": {
      "description": "A list of libraries to include; each library is represented by a map.",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "path": { "type": "string" },
          "as": { "type": "string" },
          "import": {
            "type": "array",
            "items": { "type": "string" }
          },
          "block": {
            "type": "array",
            "items": { "type": "string" }
          },
          "bypass-export-list": { "type": "boolean" }
        }
      }
    },
    "export": {
      "description": "A list of job names exported by this configuration.",
      "type": "array",
      "items": { "type": "string" }
    },
    "default-job": { "type": "string" },
    "let": {
      "description": "A global map of macros; this will be included in every job.",
      "type": "object"
    },
    "jobs": {
      "description": "A map of job entries.",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "add-css":                   { "$ref": "#/definitions/add-css" },
          "=add-css":                  { "$ref": "#/definitions/add-css" },
          "add-script":                { "$ref": "#/definitions/add-script" },
          "=add-script":               { "$ref": "#/definitions/add-script" },
          "api":                       { "$ref": "#/definitions/api" },
          "=api":                      { "$ref": "#/definitions/api" },
          "asset-let":                 { "$ref": "#/definitions/asset-let" },
          "=asset-let":                { "$ref": "#/definitions/asset-let" },
          "cache":                     { "$ref": "#/definitions/cache" },
          "=cache":                    { "$ref": "#/definitions/cache" },
          "clean-files":               { "$ref": "#/definitions/clean-files" },
          "=clean-files":              { "$ref": "#/definitions/clean-files" },
          "collect-environment-info":  { "$ref": "#/definitions/collect-environment-info" },
          "=collect-environment-info": { "$ref": "#/definitions/collect-environment-info" },
          "combine-images":            { "$ref": "#/definitions/combine-images" },
          "=combine-images":           { "$ref": "#/definitions/combine-images" },
          "font-map":                  { "$ref": "#/definitions/font-map" },
          "=font-map":                 { "$ref": "#/definitions/font-map" },
          "compile":                   { "$ref": "#/definitions/compile" },
          "=compile":                  { "$ref": "#/definitions/compile" },
          "compile-options":           { "$ref": "#/definitions/compile-options" },
          "=compile-options":          { "$ref": "#/definitions/compile-options" },
          "config-warnings":           { "$ref": "#/definitions/config-warnings" },
          "=config-warnings":          { "$ref": "#/definitions/config-warnings" },
          "copy-files":                { "$ref": "#/definitions/copy-files" },
          "=copy-files":               { "$ref": "#/definitions/copy-files" },
          "copy-resources":            { "$ref": "#/definitions/copy-resources" },
          "=copy-resources":           { "$ref": "#/definitions/copy-resources" },
          "default-job":               { "$ref": "#/definitions/default-job" },
          "=default-job":              { "$ref": "#/definitions/default-job" },
          "dependencies":              { "$ref": "#/definitions/dependencies" },
          "=dependencies":             { "$ref": "#/definitions/dependencies" },
          "desc":                      { "$ref": "#/definitions/desc" },
          "=desc":                     { "$ref": "#/definitions/desc" },
          "environment":               { "$ref": "#/definitions/environment" },
          "=environment":              { "$ref": "#/definitions/environment" },
          "exclude":                   { "$ref": "#/definitions/exclude" },
          "=exclude":                  { "$ref": "#/definitions/exclude" },
          "export":                    { "$ref": "#/definitions/export" },
          "=export":                   { "$ref": "#/definitions/export" },
          "extend":                    { "$ref": "#/definitions/extend" },
          "=extend":                   { "$ref": "#/definitions/extend" },
          "fix-files":                 { "$ref": "#/definitions/fix-files" },
          "=fix-files":                { "$ref": "#/definitions/fix-files" },
          "include":                   { "$ref": "#/definitions/include" },
          "=include":                  { "$ref": "#/definitions/include" },
          "jobs":                      { "$ref": "#/definitions/jobs" },
          "=jobs":                     { "$ref": "#/definitions/jobs" },
          "let":                       { "$ref": "#/definitions/let" },
          "=let":                      { "$ref": "#/definitions/let" },
          "library":                   { "$ref": "#/definitions/library" },
          "=library":                  { "$ref": "#/definitions/library" },
          "lint-check":                { "$ref": "#/definitions/lint-check" },
          "=lint-check":               { "$ref": "#/definitions/lint-check" },
          "log":                       { "$ref": "#/definitions/log" },
          "=log":                      { "$ref": "#/definitions/log" },
          "migrate-files":             { "$ref": "#/definitions/migrate-files" },
          "=migrate-files":            { "$ref": "#/definitions/migrate-files" },
          "name":                      { "$ref": "#/definitions/name" },
          "=name":                     { "$ref": "#/definitions/name" },
          "packages":                  { "$ref": "#/definitions/packages" },
          "=packages":                 { "$ref": "#/definitions/packages" },
          "pretty-print":              { "$ref": "#/definitions/pretty-print" },
          "=pretty-print":             { "$ref": "#/definitions/pretty-print" },
          "provider":                  { "$ref": "#/definitions/provider" },
          "=provider":                 { "$ref": "#/definitions/provider" },
          "require":                   { "$ref": "#/definitions/require" },
          "=require":                  { "$ref": "#/definitions/require" },
          "run":                       { "$ref": "#/definitions/run" },
          "=run":                      { "$ref": "#/definitions/run" },
          "shell":                     { "$ref": "#/definitions/shell" },
          "=shell":                    { "$ref": "#/definitions/shell" },
          "slice-images":              { "$ref": "#/definitions/slice-images" },
          "=slice-images":             { "$ref": "#/definitions/slice-images" },
          "translate":                 { "$ref": "#/definitions/translate" },
          "=translate":                { "$ref": "#/definitions/translate" },
          "use":                       { "$ref": "#/definitions/use" },
          "=use":                      { "$ref": "#/definitions/use" },
          "validation-manifest":       { "$ref": "#/definitions/validation-manifest" },
          "=validation-manifest":      { "$ref": "#/definitions/validation-manifest" },
          "validation-config":         { "$ref": "#/definitions/validation-config" },
          "=validation-config":        { "$ref": "#/definitions/validation-config" },
          "watch-files":               { "$ref": "#/definitions/watch-files" },
          "=watch-files":              { "$ref": "#/definitions/watch-files" },
          "web-server":                { "$ref": "#/definitions/web-server" },
          "=web-server":               { "$ref": "#/definitions/web-server" },
          "web-server-config":         { "$ref": "#/definitions/web-server-config" },
          "=web-server-config":        { "$ref": "#/definitions/web-server-config" }
        }
      }
    }
  },
  // http://manual.qooxdoo.org/devel/pages/tool/generator/generator_config_ref.html
  "definitions": {
    "add-css": {
      "type": "array",
      "additionalProperties": false,
      "items": {
        "type": "object",
        "properties": {
          "uri": { "type": "string" }
        }
      }
    },
    "add-script": {
      "type": "array",
      "additionalProperties": false,
      "items": {
        "type": "object",
        "properties": {
          "uri": { "type": "string" }
        }
      }
    },
    "api": {
      "description": "Triggers the generation of a custom Apiviewer application.",
      "type": "object",
      "properties": {
        "path": { "type": "string" },
        "sitemap": {
          "type": "object",
          "properties": {
            "file": { "type": "string" },
            "link-uri": { "type": "string" }
          }
        },
        "verify": {
          "type": "array",
          "items": { "enum": ["links", "types", "statistics"] }
        },
        "warnings": {
          "type": "object",
          "properties": {
            "output": {
              "type": "array",
              "items": { "enum": ["data", "console"] }
            }
          }
        }
      }
    },
    "asset-let": {
      "description": "Defines theme keys that will be replaced in @asset hints in source files. (See special section on the 'themes' key).",
      "type": "object"
    },
    "cache": {
      "description": "Define the paths to cache directories, particularly to the compile cache.",
      "type": "object",
      "properties": {
        "compile": {
          "description": "path to the 'main' cache, the directory where compile results are cached, relative to the current (default: './cache').",
          "type": "string"
        },
        "downloads": {
          "description": "directory where to put downloads (e.g. contrib:// libraries), relative to the current (default: './cache-downloads').",
          "type": "string"
        },
        "invalidate-on-tool-change": {
            "type": "boolean"
        }
      }
    },
    "clean-files": {
      "description": "Triggers clean-up of files and directories within a project and the framework, e.g. deletion of generated files, cache contents, etc.",
      "type": "object",
      "additionalProperties": {
         "type": "array",
         "items": { "type": "string" }
      }
    },
    "collect-environment-info": {
      "type": "object",
      "additionalProperties": false
    },
    "combine-images": {
      "description": "Triggers creation of a combined image file that contains various images.",
      "type": "object",
      "properties": {
        "montage-cmd": { "type": "string" },
        "images": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "input": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "prefix": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  }
                }
              },
              "layout": {
                "enum": ["horizontal", "vertical"]
              },
              "prefix": {
                "type": "array",
                "items": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "font-map": {
      "description": "Triggers creation of a font map that resolves the glyphname to its unicode id.",
      "type": "object",
      "properties": {
        "fonts": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "prefix": {
                "type": "array",
                "items": { "type": "string" }
              },
              "size": {
                "type": "number"
              },
              "alias": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "compile": {
      "description": "Triggers generation of a source or build version of the application.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "enum": ["source", "build", "hybrid"]
        }
      }
    },
    "compile-options": {
      "description": "General compile options, a super-set of source and build options.",
      "type": "object",
      "properties": {
        "paths": {
          "type": "object",
          "properties": {
            "file": { "type": "string" },
            "file-prefix": { "type": "string" },
            "app-root": { "type": "string" },
            "gzip": { "type": "boolean" },
            "loader-template": { "type": "string" }
          }
        },
        "uris": {
          "type": "object",
          "properties": {
            "script": { "type": "string" },
            "ressource": { "type": "string" },
            "add-nocache-param": { "type": "boolean" }
          }
        },
        "code": {
          "type": "object",
          "properties": {
            "format": { "type": "boolean" },
            "locales": {
              "type": "array",
              "items": { "type": "string" }
            },
            "optimize": {
              "type": "array",
              "items": { "enum": [ "basecalls", "comments", "privates", "strings", "variables", "variants", "whitespace", "statics" ] }
            },
            "decode-uris-plug": { "type": "string" },
            "except": {
              "type": "array",
              "items": { "type": "string" }
            },
            "lint-check": { "type": "boolean" }
          }
        }
      }
    },
    "config-warnings": {
      "type": "object",
      "properties": {
          "job-shadowing": {
            "type": "array",
            "items": { "type": "string" }
          },
          "tl-unknown-keys": {
            "type": "array",
            "items": { "type": "string" }
          },
          "job-unknown-keys": {
            "type": "array",
            "items": { "type": "string" }
          }
      }
    },
    "copy-files": {
      "description": "Triggers files/directories to be copied, usually between source and build version.",
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": { "type": "string" }
        },
        "source": { "type": "string" },
        "target": { "type": "string" }
      }
    },
    "copy-resources": {
      "description": "Triggers the copying of resources, usually between source and build version.",
      "type": "object",
      "properties": {
        "target": { "type": "string" }
      }
    },
    "default-job": {
      "type": "string"
    },
    "dependencies": {
      "type": "object",
      "properties": {
        "follow-static-initializers": { "type": "boolean" },
        "sort-topological": { "type": "boolean" }
      }
    },
    "desc": { "type": "string" },
    "environment": {
      "description": "Define global key:value pairs for the generated application.",
      "type": "object"
    },
    "exclude": {
      "type": "array",
      "items": { "type": "string" }
    },
    "export": {
      "type": "array",
      "items": { "type": "string" }
    },
    "extend": {
      "description": "Extend the current job with other jobs. Takes an array of job names. The information of these jobs are merged into the current job description, so the current job sort of “inherits” their settings. (See the special section on 'extend' semantics).",
      "type": "array",
      "items": { "type": "string" }
    },
    "fix-files": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "eol-style": { "enum": ["LF", "CR", "CRLF"] },
        "tab-width": { "type": "integer" }
      }
    },
    "include": {
      "description": "List classes to be processed in the job. Takes an array of class specifiers.",
      "type": "array",
      "items": { "type": "string" }
    },
    "jobs": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "let": {
      "description": "Define macros. Takes a map where each key defines a macro and the value its expansion.",
      "type": "object"
    },
    "library": {
      "description": "Define libraries to be taken into account for this job. Takes an array of maps, each map specifying one library to consider. The most important part therein is the “manifest” specification. (See special section on Manifest files).",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "manifest": { "type": "string" },
          "uri": { "type": "string" }
        }
      }
    },
    "lint-check": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "allowed-globals": {
          "type": "array",
          "items": { "type": "string" }
        },
        "ignore-catch-param": { "type": "boolean" },
        "ignore-deprecated-symbols": { "type": "boolean" },
        "ignore-environment-nonlit-key": { "type": "boolean" },
        "ignore-multiple-mapkeys": { "type": "boolean" },
        "ignore-multiple-vardecls": { "type": "boolean" },
        "ignore-no-loop-block": { "type": "boolean" },
        "ignore-reference-fields": { "type": "boolean" },
        "ignore-undeclared-privates": { "type": "boolean" },
        "ignore-undefined-globals": { "type": "boolean" },
        "ignore-shadowing-locals": { "type": "boolean" },
        "ignore-unused-parameter": { "type": "boolean" },
        "ignore-unused-variables": { "type": "boolean" },
        "run": { "type": "boolean" },
        "warn-jsdoc-key-syntax": { "type": "boolean" },
        "warn-unknown-jsdoc-keys": { "type": "boolean" }
      }
    },
    "log": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "classes-unused": {
          "type": "array",
          "items": { "type": "string" }
        },
        "dependencies": {
          "type": "object",
          "properties": {
            "type": { "enum": ["using", "used-by"] },
            "phase": { "enum": ["runtime", "loadtime", null] },
            "include-transitive-load-deps": { "type": "boolean" },
            "format": { "enum": ["txt", "dot", "json", "provider", "flare", "term"] },
            "dot": {
              "type": "object",
              "properties": {
                "root": { "type": "string" },
                "file": { "type": "string" },
                "radius": { "type": "number" },
                "span-tree-only": { "type": "boolean" },
                "compiled-class-size": { "type": "boolean" }
              }
            },
            "json": {
              "type": "object",
              "properties": {
                "file": { "type": "string" },
                "pretty": { "type": "boolean" }
              }
            },
            "flare": {
              "type": "object",
              "properties": {
                "file": { "type": "string" },
                "pretty": { "type": "boolean" }
              }
            }
          }
        },
        "filter": {
          "type": "object",
          "properties": {
            "debug": {
                "type": "array",
                "items": { "type": "string" }
            }
          }
        },
        "privates": { "enum": ["on", "off"] },
        "resources": {
          "type": "object",
          "properties": {
            "file": {
                "type": "string"
            }
          }
        },
        "translations": {
          "type": "object",
          "properties": {
            "untranslated-keys": {
              "type": "object",
              "properties": {
                "skip-locales": {
                    "type": "array",
                    "items": { "type": "string" }
                }
              }
            }
          }
        }
      }
    },
    "migrate-files": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "from-version": { "type": "string" },
        "migrate-html": { "type": "boolean" }
      }
    },
    "name": { "type": "string" },
    "packages": {
      "description": "Define packages for the application. (See special section on packages).",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "parts": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "include": {
                "type": "array",
                "items": { "type": "string" }
              },
              "expected-load-order": { "type": "number" },
              "no-merge-private-package": { "type": "boolean" }
            }
          }
        },
        "sizes": {
          "type": "object",
          "properties": {
            "min-package": { "type": "number" },
            "min-package-unshared": { "type": "number" }
          }
        },
        "init": { "type": "string" },
        "separate-loader": { "type": "boolean" },
        "i18n-as-parts": { "type": "boolean" },
        "additional-merge-constraints": { "type": "boolean" },
        "verifier-bombs-on-error": { "type": "boolean" }
      }
    },
    "pretty-print": {
      "description": "Triggers code beautification of source class files (in-place-editing). An empty map value triggers default formatting, but further keys can tailor the output.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "general": {
          "type": "object",
          "properties": {
            "indent-string": { "type": "string" },
            "text-width": { "type": "integer" }
          }
        },
        "comments": {
          "type": "object",
          "properties": {
            "block": {
              "type": "object",
              "properties": {
                "add": { "type": "string" }
              }
            },
            "trailing": {
              "type": "object",
              "properties": {
                "keep-column": { "type": "string" },
                "comment-cols": {
                  "type": "array",
                  "items": { "type": "string" }
                },
                "padding": { "type": "string" }
              }
            }
          }
        },
        "code": {
          "type": "object",
          "properties": {
            "align-with-curlies": { "type": "boolean" },
            "open-curly": {
              "type": "object",
              "properties": {
                "newline-before": {
                  "enum": ["a", "A", "n", "N", "m", "M"]
                },
                "indent-before": { "type": "boolean" }
              }
            }
          }
        }
      }
    },
    "provider": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "app-root": { "type": "string" },
        "include": {
          "type": "array",
            "items": { "type": "string" }
        },
        "exclude": {
          "type": "array",
          "items": { "type": "string" }
        },
        "compile": {
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "require": {
      "description": "Define prerequisite classes. Takes a map, where the keys are class names and the values lists of prerequisite classes.",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": { "type": "string" }
      }
    },
    "run": {
      "description": "Define a list of jobs to run in place of the current job. (See the special section on 'run' semantics).",
      "type": "array",
      "items": { "type": "string" }
    },
    "shell": {
      "description": "Triggers the execution of an external command.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "command": {
          "type": ["string", "array"]
        },
        "command-not-found": { "type": "string" }
      }
    },
    "slice-images": {
      "description": "Triggers cutting images into regions.",
      "type": "object",
      "properties": {
        "converter-cmd": { "type": "string" },
        "images": {
          "type": "object"
        }
      }
    },
    "translate": {
      "description": "(Re-)generate .po files from source classes.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "namespaces": {
          "type": "array",
          "items": { "type": "string" }
        },
        "locales": {
          "type": "array",
          "items": { "type": "string" }
        },
        "profiles-with-metadata": { "type": "boolean" },
        "poentry-with-occurrences": { "type": "boolean" },
        "occurrences-with-linenumber": { "type": "boolean" },
        "eol-style": { "enum": ["LF", "CR", "CRLF"] }
      }
    },
    "use": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": { "type": "string" }
      }
    },
    "validation-manifest": { "type": "object" },
    "validation-config": { "type": "object" },
    "watch-files": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "paths": {
          "type": "array",
          "items": { "type": "string" }
        },
        "command": {
          "type": "object",
          "properties": {
            "line": { "type": "string" },
            "per-file": { "type": "boolean" },
            "exec-on-startup": { "type": "boolean" },
            "exit-on-retcode": { "type": "boolean" }
          }
        },
        "include": {
          "type": "array",
          "items": { "type": "string" }
        },
        "include-dirs": { "type": "boolean" },
        "check-interval": { "type": "integer" }
      }
    },
    "web-server": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "document-root": { "type": "string" },
        "server-port": { "type": "integer" },
        "log-level": { "type": "string" },
        "allow-remote-access": { "type": "boolean" },
        "active-reload" : {
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
              "client-script" : { "type" : "string" }
          }
        }
      }
    },
    "web-server-config": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "document-root": { "type": "string" },
        "output-dir": { "type": "string" },
        "template-dir": { "type": "string" },
        "httpd-type": { "type": "string" },
        "httpd-host-url": { "type": "string" }
      }
    }
  }
}
