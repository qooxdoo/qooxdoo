################################################################################
#
#  qooxdoo - the new era of web development
#
#  http://qooxdoo.org
#
#  Copyright:
#    2006-2008 1&1 Internet AG, Germany, http://www.1and1.org
#
#  License:
#    MIT: https://opensource.org/licenses/MIT
#    See the LICENSE file in the project's top-level directory for details.
#
#  Authors:
#    * Sebastian Werner (wpbasti)
#    * Andreas Ecker (ecker)
#    * Fabian Jakobs (fjakobs)
#    * Thomas Herchenroeder (thron7)
#
################################################################################

################################################################################
# VARIABLES
################################################################################

# Ubuntu's /bin/sh struggles with 'time' (bug#4398)
SHELL = /bin/bash
.SHELLFLAGS = -Oextglob  # allow ?(...), etc. glob patterns

FRAMEWORK_VERSION := $(shell cat version.txt)
FRAMEWORK_SVNINFO := $(shell python tool/admin/bin/svninfo.py .)
FRAMEWORK_GITINFO := $(shell tool/admin/bin/gitinfo.sh)

CMD_LINE = echo "----------------------------------------------------------------------------"
CMD_NICE = nice -n 10
export PYTHONPATH = $(CURDIR)/tool/pylib
PATH_TOOL_BIN = $(CURDIR)/tool/bin
PATH_TOOL_RESOURCES = $(CURDIR)/tool/admin/www/resources
PATH_FRAMEWORK_RESOURCES = $(CURDIR)/framework/source/resource/qx/mobile
PATH_MOBILE_SKELETON_RESOURCES = $(CURDIR)/component/skeleton/mobile/source/resource
CMD_PYTHON = $(CMD_NICE) python -t -O
CMD_REMOVE = $(CMD_NICE) rm -rf
CMD_MV = $(CMD_NICE) mv
CMD_MKDIR = $(CMD_NICE) mkdir -p
CMD_FIND = $(CMD_NICE) find
CMD_ZIP = $(CMD_NICE) zip
CMD_SVN = $(CMD_NICE) svn
CMD_GIT = $(CMD_NICE) git
CMD_GIT_WHEREAMI = $(CMD_GIT) describe --contains --all HEAD
CMD_RST2HTML = $(CMD_NICE) rst2html.py
CMD_ZIP_CREATE = $(CMD_ZIP) -rq
CMD_ANY2UNIX = | xargs -0 $(CMD_PYTHON) tool/pylib/misc/textutil.py --command any2Unix
CMD_MKEXEC = $(CMD_NICE) chmod a+rx
CMD_SCSS = $(CMD_NICE) sass
CMD_SCSS_WEBSITE_OPTS = --no-cache --style expanded
CMD_SCSS_FRAMEWORK_OPTS = --no-cache --style compressed


ifeq ($(DO_RELEASE),)
# --------  DEVELOPMENT SETTINGS --------------------------------------
# these settings are used during development time
OPT_GENERATOR = -m QOOXDOO_REVISION:$(FRAMEWORK_GITINFO)
QOOXDOO_RELEASE =
else
# --------  RELEASE SETTINGS ------------------------------------------
# activate from the command line with: make DO_RELEASE=1 ...
OPT_GENERATOR =
QOOXDOO_RELEASE = QOOXDOO_RELEASE=1
endif


CMD_GRUNT := grunt
CMD_NODE := node
CMD_NPM := npm
CMD_GENERATOR := $(CMD_PYTHON) "$(CURDIR)/tool/bin/generator.py" $(OPT_GENERATOR)
CMD_GENERATOR_NOOPTS := $(CMD_PYTHON) "$(CURDIR)/tool/bin/generator.py"
STAGING_HOST = qooxdoo@webtechfe-test01.schlund.de
PRODUCTION_HOST = qooxdoo@webtechfe01.schlund.de

FILES_TEXT = \( -name "*.py" -o -name "*.sh" -o -name "*.js" -o -name "*.html" -o -name "*.css" -o -name "*.xml" -o -name Makefile -o -name AUTHORS -o -name LICENSE -o -name README -o -name RELEASENOTES -o -name TODO \)
FILES_TEMP = \( -name "*.rej" -o -name "*.orig" -o -name "*.pyc" -o -name "*.pyo" -o -name "*.bak" -o -name "*.old" -o -name "*~" -o -name "messages.pot" \)
FILES_EXEC = \( -name "*.py" -o -name "*.sh" \)

CMD_SYNC_ONLINE = $(CMD_NICE) rsync --checksum --recursive --delete --inplace --links --safe-links --exclude='.git*'
CMD_SYNC_OFFLINE = $(CMD_NICE) rsync --recursive --delete --inplace --links --safe-links --exclude='.git*'
CMD_SYNC_BACKUP = $(CMD_NICE) rsync --recursive --delete --inplace --copy-links
CMD_SYNC_BACKUP_WWW = $(CMD_NICE) rsync --recursive --verbose

# Directories
RELEASE_BUILD = release/temp/build/qooxdoo-$(FRAMEWORK_VERSION)-build
RELEASE_SDK = release/temp/sdk/qooxdoo-$(FRAMEWORK_VERSION)-sdk

APPLICATIONS = websitewidgetbrowser tutorial todo feedreader mobileshowcase playground showcase widgetbrowser github demobrowser
APPLICATIONS_SCSS = mobileshowcase playground feedreader tutorial
COMPONENTS = apiviewer testrunner server website
COMPONENTS_SCSS = testrunner
FRAMEWORK_TARGETS = api test test-mobile dependencies
TUTORIALS = mobiletweets tweets website

WEBSITE_MODULES = core animation blocker cookie dataset dev io matchmedia messaging placeholder placement rest storage template textselection transform util ui
WEBSITE_MODULES_ZIP = q-modules-$(FRAMEWORK_VERSION).js.zip
WEBSITE_MODULES_MIN_ZIP = q-modules-$(FRAMEWORK_VERSION).min.js.zip
WEBSITE_VERSION_STR = -${FRAMEWORK_VERSION}
#WEBSITE_VERSION_STR = ""


################################################################################
# RELEASE TARGETS
################################################################################

release: release-sdk

release-sdk: distclean release-sdk-sans-clean
release-sdk-sans-clean: release-sdk-info framework-api framework-dependencies resources-framework-build website-api website server showcase manual-build release-sdk-svn-collect release-sdk-archive


release-sdk-info:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING SDK VERSION OF RELEASE $(FRAMEWORK_VERSION)"
	@echo "****************************************************************************"


release-sdk-svn-collect:
	@echo
	@echo "  SYNCHRONISATION OF SDK RELEASE"
	@echo "----------------------------------------------------------------------------"

	@echo "  * Extracting sources..."
	@$(CMD_MKDIR) $(RELEASE_SDK)
	@$(CMD_GIT) archive `$(CMD_GIT_WHEREAMI)` . | tar -x -C $(RELEASE_SDK)

	@echo "  * Preparing index.html..."
	@cat ./index.html | \
		sed 's/class="local"/class="local hide"/g' | \
		sed 's/ class="publish"//g' > $(RELEASE_SDK)/index.html

	@echo "  * Synchronizing root..."
	@$(CMD_REMOVE) $(RELEASE_SDK)/readme.rst
	@$(CMD_RST2HTML) ./readme.rst > $(RELEASE_SDK)/readme.html
	@#if rst2html.py is not available, the next can replace the previous
	@#cat ./readme.rst > $(RELEASE_SDK)/readme.txt

	@echo "  * Synchronizing applications/components..."
	@for APPLICATION in $(APPLICATIONS); do \
		$(CMD_MKDIR) $(RELEASE_SDK)/application/$$APPLICATION/source/script; \
		$(CMD_SYNC_OFFLINE) ./tool/data/generator/needs_generation.js $(RELEASE_SDK)/application/$$APPLICATION/source/script/$$APPLICATION.js; \
	done
	@# showcase
	@$(CMD_SYNC_OFFLINE) application/showcase/build/* $(RELEASE_SDK)/application/showcase/build
	@# libs
	@for COMPONENT in `echo server website`; do \
		$(CMD_MKDIR) $(RELEASE_SDK)/component/standalone/$$COMPONENT/script/; \
		for F in `echo component/standalone/$$COMPONENT/script/q*.js`; do \
			L=`basename $$F`; \
			if [[ ( "$$COMPONENT" == "website" ) && ( "$$L" =~ 'q-source' ) ]] ; then \
				continue; \
			fi; \
			$(CMD_SYNC_OFFLINE) $$F $(RELEASE_SDK)/component/standalone/$$COMPONENT/script/$$L; \
		done; \
		if [ "$$COMPONENT" == "website" ]; then \
			$(CMD_SYNC_OFFLINE) component/standalone/$$COMPONENT/api/* $(RELEASE_SDK)/component/standalone/$$COMPONENT/api; \
		fi; \
	done

	@echo "  * Synchronizing framework..."
	@$(CMD_SYNC_OFFLINE) framework/api/* $(RELEASE_SDK)/framework/api
	@$(CMD_MKDIR) $(RELEASE_SDK)/framework/source/script
	@$(CMD_SYNC_OFFLINE) framework/source/script/dependencies.json $(RELEASE_SDK)/framework/source/script/dependencies.json

	@echo "  * Synchronizing tools..."
	@$(CMD_REMOVE) $(RELEASE_SDK)/tool/admin/

	@echo "  * Switching to Unix line endings..."
	@$(CMD_FIND) $(RELEASE_SDK) $(FILES_TEXT) -print0 $(CMD_ANY2UNIX)

	@echo "  * Synchronizing documentation..."
	@$(CMD_REMOVE) $(RELEASE_SDK)/documentation/manual/
	@$(CMD_REMOVE) $(RELEASE_SDK)/documentation/tech_manual/
	@$(CMD_MKDIR) $(RELEASE_SDK)/documentation/manual/
	@$(CMD_SYNC_OFFLINE) documentation/manual/build/html/* $(RELEASE_SDK)/documentation/manual/
	@$(CMD_SYNC_OFFLINE) documentation/manual/build/latex/qooxdoo.pdf $(RELEASE_SDK)/documentation/manual/



release-sdk-archive:
	@echo "  * Generating zip archive..."
	@cd release/temp/sdk; $(CMD_REMOVE) ../../qooxdoo-$(FRAMEWORK_VERSION)-sdk.zip; $(CMD_ZIP_CREATE) ../../qooxdoo-$(FRAMEWORK_VERSION)-sdk.zip qooxdoo-$(FRAMEWORK_VERSION)-sdk

	@echo "  * Cleaning up..."
	@rm -rf release/temp


################################################################################
# APIVIEWER COMPONENT TARGETS
################################################################################

info-apiviewer:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING APIVIEWER COMPONENT"
	@echo "****************************************************************************"


#apiviewer: info-apiviewer exec-apiviewer-build
#
#exec-apiviewer-build:
#	@time ( cd framework && $(CMD_GENERATOR) api ) || exit 1
#

################################################################################
# WEBSITE TARGETS
################################################################################

info-website:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING WEBSITE"
	@echo "****************************************************************************"


website: info-website exec-website-build

website-api:
	@time ( cd component/standalone/website && $(CMD_GRUNT) api ) || exit 1

exec-website-build:
	@time ( cd component/standalone/website && $(CMD_GENERATOR) build,build-min,build-module-all,build-module-all-min ) || exit 1


################################################################################
# SERVER TARGETS
################################################################################

info-server:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING SERVER"
	@echo "****************************************************************************"


server: info-server exec-server-build

exec-server-build:
	@time ( cd component/standalone/server && $(CMD_GENERATOR) build,build-min ) || exit 1


################################################################################
# SHOWCASE TARGETS
################################################################################

showcase:
	@time ( cd application/showcase && $(CMD_GENERATOR) build ) || exit 1


#################################################################################
## TESTRUNNER TARGETS
#################################################################################
#
#info-testrunner:
#	@echo
#	@echo "****************************************************************************"
#	@echo "  GENERATING TESTRUNNER COMPONENT"
#	@echo "****************************************************************************"
#
#
#testrunner: info-testrunner exec-testrunner-build
#
#exec-testrunner-build:
#	@time ( cd component/testrunner && $(CMD_GENERATOR) build ) || exit 1
#


################################################################################
# SKELETON TARGETS
################################################################################

SKELETON_TEMP = temp-skeleton
SKELETON_FILES = generate.py config.json Manifest.json source/class source/resource source/translation source/index.html

info-skeleton:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING SKELETON"
	@echo "****************************************************************************"

skeleton: info-skeleton exec-skeleton-collect exec-skeleton-archive

exec-skeleton-collect:
	@echo "  * Copying info files..."
	@$(CMD_MKDIR) $(SKELETON_TEMP)/qooxdoo-$(FRAMEWORK_VERSION)-skeleton
	@for FILE in `find ../ -maxdepth 1 -type f -name "*.txt"`; do \
	  echo "    - `basename $$FILE`"; \
	  cp -f $$FILE $(SKELETON_TEMP)/qooxdoo-$(FRAMEWORK_VERSION)-skeleton; \
	done

	@echo "  * Collecting skeleton files..."
	@$(CMD_MKDIR) $(SKELETON_TEMP)/qooxdoo-$(FRAMEWORK_VERSION)-skeleton
	@for FILE in $(SKELETON_FILES); do \
			echo "    - $$FILE"; \
			$(CMD_MKDIR) `dirname $(SKELETON_TEMP)/qooxdoo-$(FRAMEWORK_VERSION)-skeleton/skeleton/$$FILE`; \
			$(CMD_SYNC_OFFLINE) component/skeleton/$$FILE `dirname $(SKELETON_TEMP)/qooxdoo-$(FRAMEWORK_VERSION)-skeleton/skeleton/$$FILE`; \
		done

exec-skeleton-archive:
	@echo "  * Cleaning up target folders..."
	@$(CMD_FIND) $(SKELETON_TEMP) $(FILES_TEMP) -exec $(CMD_REMOVE) {} \;

	@echo "  * Switching to Unix line endings..."
	@$(CMD_FIND) $(SKELETON_TEMP) $(FILES_TEXT) $(CMD_ANY2UNIX)

	@echo "  * Fixing executables..."
	@$(CMD_FIND) $(SKELETON_TEMP) $(FILES_EXEC) -exec $(CMD_MKEXEC) {} \;

	@echo "  * Building skeleton archive..."
	@cd $(SKELETON_TEMP); $(CMD_REMOVE) ../component/qooxdoo-$(FRAMEWORK_VERSION)-skeleton.zip; $(CMD_ZIP_CREATE) ../component/qooxdoo-$(FRAMEWORK_VERSION)-skeleton.zip qooxdoo-$(FRAMEWORK_VERSION)-skeleton

	@echo "  * Cleaning up temporary folder..."
	@$(CMD_REMOVE) $(SKELETON_TEMP)

	@echo "  * Created component/qooxdoo-$(FRAMEWORK_VERSION)-skeleton.zip"


################################################################################
# BASIC TARGETS
################################################################################

distclean:
	@for APPLICATION in $(APPLICATIONS); do \
		F="application/$$APPLICATION"; \
		if [ -e $$F ]; then \
			if [ "$$APPLICATION" != "websitewidgetbrowser" ]; then \
				(( cd $$F && $(CMD_GENERATOR) distclean ) || ( echo "Unable to distclean $$F"; exit 1 )); \
			fi; \
		fi; \
	done
	@for APPLICATION in $(COMPONENTS); do \
		if [[ "$$APPLICATION" == server || "$$APPLICATION" == website ]]; then \
			F="component/standalone/$$APPLICATION"; \
		else \
			F="component/$$APPLICATION"; \
		fi; \
		if [ -e $$F ]; then \
			(( cd $$F && $(CMD_GENERATOR) distclean ) || ( echo "Unable to distclean $$f"; exit 1 )); \
		fi; \
	done
	@cd framework && $(CMD_GENERATOR) distclean
	@$(CMD_REMOVE) application/*.zip
	@$(CMD_REMOVE) release

######################################
# LINT
######################################
lint: lint-apps lint-components framework-lint

lint-apps:
	@for APPLICATION in $(APPLICATIONS); do \
		( cd application/$$APPLICATION && $(CMD_GENERATOR) lint ) \
	done

##
# The next contains a near copy of build-tutorials
lint-components:
	@for COMPONENT in $(COMPONENTS); do \
		if [[ "$$COMPONENT" = "apiviewer" || "$$COMPONENT" = "testrunner" ]]; then \
			( cd component/$$COMPONENT && $(CMD_GENERATOR) lint ) \
		fi; \
	done
	@paths=""; for TUTORIAL in $(TUTORIALS); do \
		TUTDIR="component/tutorials/$$TUTORIAL"; \
		for STEP in `ls $$TUTDIR`; do \
			F="$$TUTDIR/$$STEP"; \
			if [ -d $$F ]; then \
				paths="$$paths $$TUTORIAL/$$STEP"; \
				if [ "$$TUTORIAL" != "website" ]; then \
					( cd $$F && $(CMD_GENERATOR) lint ); \
				fi; \
			fi; \
		done; \
	done

######################################
# FIX
######################################
fix: fix-apps fix-components framework-fix

fix-apps:
	@for APPLICATION in $(APPLICATIONS); do \
		( cd application/$$APPLICATION && $(CMD_GENERATOR) fix ) \
	done

##
# The next contains a near copy of build-tutorials
fix-components:
	@for COMPONENT in $(COMPONENTS); do \
		if [[ "$$COMPONENT" = "apiviewer" || "$$COMPONENT" = "testrunner" ]]; then \
			( cd component/$$COMPONENT && $(CMD_GENERATOR) fix ) \
		fi; \
	done
	@paths=""; for TUTORIAL in $(TUTORIALS); do \
		TUTDIR="component/tutorials/$$TUTORIAL"; \
		for STEP in `ls $$TUTDIR`; do \
			F="$$TUTDIR/$$STEP"; \
			if [ -d $$F ]; then \
				paths="$$paths $$TUTORIAL/$$STEP"; \
				if [ "$$TUTORIAL" != "website" ]; then \
					( cd $$F && $(CMD_GENERATOR) fix ); \
				fi; \
			fi; \
		done; \
	done

######################################
# TRANSLATION
######################################
translation: translate-apps translate-components framework-translation

translate-apps:
	@for APPLICATION in $(APPLICATIONS); do \
		( cd application/$$APPLICATION && $(CMD_GENERATOR) translation ) \
	done

translate-components:
	@for COMPONENT in $(COMPONENTS); do \
		if [[ "$$COMPONENT" = "apiviewer" || "$$COMPONENT" = "testrunner" ]]; then \
			( cd component/$$COMPONENT && $(CMD_GENERATOR) translation ) \
		fi; \
	done

######################################
# BUILD
######################################
build: grunt-setup build-apps build-components

grunt-setup:
	@( $(CMD_NPM) install ) || exit 1; \
	( $(CMD_GRUNT) setup; ) || exit 1;

build-apps:
	@time for APPLICATION in $(APPLICATIONS); do \
		if [ "$$APPLICATION" = "feedreader" ]; then \
			( cd application/$$APPLICATION && $(CMD_GENERATOR) build,build-mobile,build-website ) || exit 1; \
			elif [ "$$APPLICATION" = "todo" ]; then \
				( cd application/$$APPLICATION && $(CMD_GENERATOR) build-mini ) || exit 1; \
			elif [ "$$APPLICATION" = "websitewidgetbrowser" ]; then \
				( cd application/$$APPLICATION && $(CMD_GRUNT) build ) || exit 1; \
		else \
			( cd application/$$APPLICATION && $(CMD_GENERATOR) build ) || exit 1; \
		fi; \
	done

build-components:
	@time for COMPONENT in $(COMPONENTS); do \
		if [ "$$COMPONENT" = "website" ]; then \
			( cd component/standalone/$$COMPONENT ) || exit 1; \
			( cd component/standalone/$$COMPONENT && $(CMD_GENERATOR) build ) || exit 1; \
			( cd component/standalone/$$COMPONENT && $(CMD_GENERATOR) build-min ) || exit 1; \
			( cd component/standalone/$$COMPONENT && $(CMD_GENERATOR) build-module-all ) || exit 1; \
			( cd component/standalone/$$COMPONENT && $(CMD_GENERATOR) build-module-all-min ) || exit 1; \
			( cd component/standalone/$$COMPONENT && $(CMD_GRUNT) sass ) || exit 1; \
			( cd component/standalone/$$COMPONENT && $(CMD_GRUNT) test ) || exit 1; \
			( cd component/standalone/$$COMPONENT && $(CMD_GRUNT) api ) || exit 1; \
		elif [ "$$COMPONENT" = "server" ]; then \
			( cd component/standalone/$$COMPONENT && $(CMD_GENERATOR) build ) || exit 1; \
			( cd component/standalone/$$COMPONENT && $(CMD_GENERATOR) build-min ) || exit 1; \
		elif [ "$$COMPONENT" = "testrunner" ]; then \
			( cd component/$$COMPONENT && $(CMD_GENERATOR) build ) || exit 1; \
			( cd component/testrunner && $(CMD_GENERATOR) portable-build ) || exit 1; \
		else \
			( cd component/$$COMPONENT && $(CMD_GENERATOR) build ) || exit 1; \
		fi; \
	done

source: source-apps source-components
source-apps:
	@time for APPLICATION in $(APPLICATIONS); do ( cd application/$$APPLICATION && $(CMD_GENERATOR) source ) || exit 1; done
	@time for APPLICATION in $(APPLICATIONS); do \
		if [ "$$APPLICATION" = "feedreader" ]; then \
			( cd application/$$APPLICATION && $(CMD_GENERATOR) source,source-mobile ) || exit 1; \
		elif [ "$$APPLICATION" = "todo" ]; then noop; \
		else \
			( cd application/$$APPLICATION && $(CMD_GENERATOR) source ) || exit 1; \
		fi; \
	done

source-components:
	@time for APPLICATION in $(COMPONENTS); do ( cd component/$$APPLICATION && $(CMD_GENERATOR) source ) || exit 1; done


################################################################################
# TUTORIAL TARGETS
################################################################################

tutorials-build:
	@paths=""; for TUTORIAL in $(TUTORIALS); do \
		TUTDIR="component/tutorials/$$TUTORIAL"; \
		for STEP in `ls $$TUTDIR`; do \
			F="$$TUTDIR/$$STEP"; \
			if [ -d $$F ]; then \
				paths="$$paths $$TUTORIAL/$$STEP"; \
				if [ "$$TUTORIAL" = "website" ]; then \
					cp component/standalone/website/script/q.min.js $$F; \
				else \
					( cd $$F && $(CMD_GENERATOR) build ) || exit 1; \
				fi; \
			fi; \
		done; \
	done; \
	echo '<html><body><ul>' > component/tutorials/index.html; \
	for path in $$paths; do \
		echo "<li><a href=\"$$path\">$$path</a></li>" >> component/tutorials/index.html; \
	done; \
	echo '</ul></body></html>' >> component/tutorials/index.html;

tutorials-publish:
	@echo "  * Syncing tutorials..."
	@for TUTORIAL in $(TUTORIALS); do \
		if [ "$$TUTORIAL" = "tweets" ]; then \
			TUTDIR="component/tutorials/$$TUTORIAL"; \
			for STEP in `ls $$TUTDIR`; do \
				F="$$TUTDIR/$$STEP"; \
				if [ -d $$F ]; then \
					if [ "$$STEP" = "step4.5" ]; then \
						echo "    - $$TUTORIAL $$STEP..."; \
						$(CMD_SYNC_ONLINE) $$F/build/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$${TUTORIAL}_$${STEP} || exit 1; \
					fi; \
				fi; \
			done; \
		fi; \
	done;

################################################################################
# RESOURCE *WEBSITE* TARGETS
#
# Re-creates files in the distribution directories of tool/admin/www/resources
# which will then be published to the production websites (among others).
################################################################################

resources-build: resources-build-css

##
# Generates the .css files in the distribution directory from the .scss files.
resources-build-css:
	@echo "  * Compiling style sheets..."
	@cd $(PATH_TOOL_RESOURCES)/scss/; for SCSS_FILE in `ls [!_]*.scss`; do \
		echo "     - $$SCSS_FILE..."; \
		$(CMD_SCSS) $(CMD_SCSS_WEBSITE_OPTS) $$SCSS_FILE ../stylesheets/$${SCSS_FILE/%.scss/.css}; \
	done

##
# Generates the custom q.js, copies it and the q plugins to the distrib.
# directory.
# Needs CMD_GENERATOR_NOOPTS so the result will not depend on the git revision.
# -- currently not used! --  (so has to be called manually)
resources-build-js:
	@echo "  * Creating custom q and plugins..."
	@( cd $(PATH_TOOL_RESOURCES)/q.websites/ && $(CMD_GENERATOR_NOOPTS) q-build-min ) || exit 1
	@( cd $(PATH_TOOL_RESOURCES)/q.websites/ && $(CMD_GENERATOR_NOOPTS) copy-to-resources ) || exit 1

resources-check:
	@cd $(PATH_TOOL_RESOURCES)/scss/; for SCSS_FILE in `ls [!_]*.scss`; do \
		F="../stylesheets/$${SCSS_FILE/%.scss/.css}"; \
		[ $$F -nt $$SCSS_FILE ] || ( echo "Outdated $$F; run 'make resources-build' first!"; exit 1 ) || exit 1; \
	done

resources-publish:
	@echo "  * Syncing resources..."
	@$(CMD_SYNC_ONLINE) $(PATH_TOOL_RESOURCES)/stylesheets/ $(STAGING_HOST):/var/www/qooxdoo/resources/stylesheets/ || exit 1;
	@$(CMD_SYNC_ONLINE) $(PATH_TOOL_RESOURCES)/javascripts/ $(STAGING_HOST):/var/www/qooxdoo/resources/javascripts/ || exit 1;

################################################################################
# RESOURCE *FRAMEWORK* TARGETS
#
# Create build artifacts from resource files (e.g. scss -> css compilation)
################################################################################

resources-framework-build: resources-framework-build-css

resources-framework-build-css:
	@echo
	@echo "  * Compiling style sheets..."
	@cd $(PATH_MOBILE_SKELETON_RESOURCES)/custom/scss/; for SCSS_FILE in `ls [!_]*.scss`; do \
		echo "     - mobile-skeleton: $$SCSS_FILE..."; \
		$(CMD_SCSS) $(CMD_SCSS_FRAMEWORK_OPTS) -I $(PATH_FRAMEWORK_RESOURCES)/scss -I $(PATH_FRAMEWORK_RESOURCES)/scss/theme/indigo -I $(PATH_FRAMEWORK_RESOURCES)/../scss $$SCSS_FILE ../css/$${SCSS_FILE/%.scss/.css}; \
	done
	@for APP in $(APPLICATIONS_SCSS); do \
		cd $(CURDIR)/application/$$APP/source/resource/$$APP/scss/; for SCSS_FILE in `ls [!_]*.scss`; do \
			echo "     - $$APP: $$SCSS_FILE..."; \
			$(CMD_SCSS) $(CMD_SCSS_FRAMEWORK_OPTS) -I $(PATH_FRAMEWORK_RESOURCES)/scss -I $(PATH_FRAMEWORK_RESOURCES)/scss/theme/indigo -I $(PATH_FRAMEWORK_RESOURCES)/../scss $$SCSS_FILE ../css/$${SCSS_FILE/%.scss/.css}; \
		done; \
	done
	@for COMP in $(COMPONENTS_SCSS); do \
		if [ "$$COMP" = "testrunner" ]; then \
			cd $(CURDIR)/component/$$COMP/source/resource/$$COMP/view/mobile/scss/; for SCSS_FILE in `ls [!_]*.scss`; do \
				echo "     - $$COMP: $$SCSS_FILE..."; \
				$(CMD_SCSS) $(CMD_SCSS_FRAMEWORK_OPTS) -I $(PATH_FRAMEWORK_RESOURCES)/scss -I $(PATH_FRAMEWORK_RESOURCES)/scss/theme/indigo -I $(PATH_FRAMEWORK_RESOURCES)/../scss $$SCSS_FILE ../css/$${SCSS_FILE/%.scss/.css}; \
			done; \
		else \
			cd $(CURDIR)/component/$$COMP/source/resource/$$COMP/scss/; for SCSS_FILE in `ls [!_]*.scss`; do \
				echo "     - $$COMP: $$SCSS_FILE..."; \
				$(CMD_SCSS) $(CMD_SCSS_FRAMEWORK_OPTS) -I $(PATH_FRAMEWORK_RESOURCES)/scss -I $(PATH_FRAMEWORK_RESOURCES)/scss/theme/indigo -I $(PATH_FRAMEWORK_RESOURCES)/../scss $$SCSS_FILE ../css/$${SCSS_FILE/%.scss/.css}; \
			done; \
		fi; \
	done

resources-framework-check:
	@# check if mock content (more than two lines) is now overwritten (only one compressed css line and in second line sourceMapping comment)
	@cd $(PATH_MOBILE_SKELETON_RESOURCES)/custom/scss/; for SCSS_FILE in `ls [!_]*.scss`; do \
		F="../css/$${SCSS_FILE/%.scss/.css}"; \
		LINES=`cat $$F | wc -l`; \
		[ $$LINES -lt 3 ] || ( echo "CSS file $$F seems not compressed (more than two lines); run 'make resources-framework-build-css' first!"; exit 1 ) || exit 1; \
	done
	@for APP in $(APPLICATIONS_SCSS); do \
		cd $(CURDIR)/application/$$APP/source/resource/$$APP/scss/; for SCSS_FILE in `ls [!_]*.scss`; do \
			F="../css/$${SCSS_FILE/%.scss/.css}"; \
			[ $$F -nt $$SCSS_FILE ] || ( echo "CSS file $$F is missing (within $$APP); run 'make resources-framework-build-css' first!"; exit 1 ) || exit 1; \
		done; \
	done
	@for COMP in $(COMPONENTS_SCSS); do \
		if [ "$$COMP" = "testrunner" ]; then \
			cd $(CURDIR)/component/$$COMP/source/resource/$$COMP/view/mobile/scss/; for SCSS_FILE in `ls [!_]*.scss`; do \
				F="../css/$${SCSS_FILE/%.scss/.css}"; \
				[ $$F -nt $$SCSS_FILE ] || ( echo "CSS file $$F is missing (within $$COMP); run 'make resources-framework-build-css' first!"; exit 1 ) || exit 1; \
			done; \
		else \
			cd $(CURDIR)/component/$$COMP/source/resource/$$COMP/scss/; for SCSS_FILE in `ls [!_]*.scss`; do \
				F="../css/$${SCSS_FILE/%.scss/.css}"; \
				[ $$F -nt $$SCSS_FILE ] || ( echo "CSS file $$F is missing (within $$COMP); run 'make resources-framework-build-css' first!"; exit 1 ) || exit 1; \
			done; \
		fi; \
	done

################################################################################
# DOCUMENTATION TARGETS
################################################################################

PATH_MANUAL = documentation/manual
MANUAL_CSS = base.css layout.css reset.css
MANUAL_JS = application.js html5shiv.js q.js q.placeholder.js q.sticky.js
MANUAL_THEME = _theme.indigo

manual-resources:
	@echo "  * Syncing manual css..."
	@for F in $(MANUAL_CSS); do \
		$(CMD_SYNC_OFFLINE) $(PATH_TOOL_RESOURCES)/stylesheets/$$F \
			$(PATH_MANUAL)/source/$(MANUAL_THEME)/copies; \
	done
	@echo "  * Syncing manual javascript..."
	@for F in $(MANUAL_JS); do \
		$(CMD_SYNC_OFFLINE) $(PATH_TOOL_RESOURCES)/javascripts/$$F \
			$(PATH_MANUAL)/source/$(MANUAL_THEME)/copies; \
	done

# the next is necessary as we're changing conf.py values for release
manual-build-clean:
	@(cd documentation/manual && make clean)

manual-build-html:
	@(cd $(PATH_MANUAL) && $(QOOXDOO_RELEASE) make html)
	@(cd documentation/tech_manual && make html)

manual-build-pdf:
	@(cd $(PATH_MANUAL) && $(QOOXDOO_RELEASE) make latex)
	@(cd $(PATH_MANUAL)/build/latex && make all-pdf)

manual-build: manual-build-clean manual-resources manual-build-html manual-build-pdf

manual-publish:
	@echo "  * Syncing HTML docs..."
	@$(CMD_SYNC_ONLINE) $(PATH_MANUAL)/build/html/* \
		$(STAGING_HOST):/var/www/qooxdoo/manual/$(FRAMEWORK_VERSION)/
	@echo "  * Syncing PDF doc..."
	@$(CMD_SYNC_ONLINE) $(PATH_MANUAL)/build/latex/qooxdoo.pdf \
		$(STAGING_HOST):/var/www/qooxdoo/manual/$(FRAMEWORK_VERSION)/

manual-check: manual-check-html manual-check-pdf

manual-check-html:
	@for TARGET in `echo "index.html pages/core.html pages/development.html pages/desktop.html"`; do \
		F="$(PATH_MANUAL)/build/html/$$TARGET"; \
		[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
	done

manual-check-pdf:
	@F="$(PATH_MANUAL)/build/latex/qooxdoo.pdf"; \
		[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 );

################################################################################
# FRAMEWORK TARGETS
################################################################################

# generic recipe for framework targets
# strip 'framework-' from target and run as generator job
framework_target = \
	_targ_=$(subst framework-,,$(1)); \
	echo; \
	echo "****************************************************************************"; \
	echo "  Generating Framework $${_targ_}"; \
	echo "****************************************************************************"; \
	( cd framework && $(CMD_GENERATOR) $${_targ_} ) || exit 1

# list all framework targets here explicitly, so they can be invoked individually
framework-api:
	@$(call framework_target,$@)

framework-test:
	@$(call framework_target,$@)

framework-test-mobile:
	@$(call framework_target,$@)

framework-dependencies:
	@$(call framework_target,$@)

# do-all rule (uses FRAMEWORK_TARGETS)
framework-build: $(addprefix framework-,$(FRAMEWORK_TARGETS))

framework-lint:
	@$(call framework_target,$@)

framework-fix:
	@$(call framework_target,$@)

framework-translation:
	@$(call framework_target,$@)

framework-check:
	@for TARGET in $(FRAMEWORK_TARGETS); do \
		if [ "$$TARGET" = "dependencies" ]; then \
			F="framework/source/script/dependencies.json"; \
			[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
		else \
			F="framework/$$TARGET/script"; \
			[ -d $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
		fi; \
	done

framework-publish:
	@echo "  * Syncing framework..."
	@ssh $(STAGING_HOST) "$(CMD_MKDIR) /var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/framework"
	@for APPLICATION in $(FRAMEWORK_TARGETS); do \
	  echo "    - $$APPLICATION..."; \
		if [ "$$APPLICATION" = "api" ]; then \
			$(CMD_SYNC_ONLINE) framework/$$APPLICATION/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/apiviewer || exit 1; \
		fi; \
		if [ "$$APPLICATION" = "test" ]; then \
			$(CMD_SYNC_ONLINE) framework/$$APPLICATION/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/testrunner || exit 1; \
		fi; \
		if [ "$$APPLICATION" = "test-mobile" ]; then \
			$(CMD_SYNC_ONLINE) framework/$$APPLICATION/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/mobile-tests || exit 1; \
		fi; \
	done

################################################################################
# APPLICATIONS TARGETS
################################################################################

apps-publish:
	@echo "  * Syncing applications..."
	@for APPLICATION in $(APPLICATIONS); do \
		echo "    - $$APPLICATION..."; \
		if [ "$$APPLICATION" = "feedreader" ]; then \
			echo "    - $$APPLICATION-mobile..."; \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/build/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/build-mobile/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION-mobile || exit 1; \
			echo "    - $$APPLICATION-website..."; \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/build-website/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION-website || exit 1; \
		elif [ "$$APPLICATION" = "mobileshowcase" ]; then \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/build-indigo/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
		elif [ "$$APPLICATION" = "todo" ]; then \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/script $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/todo.* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/index.html $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
		elif [ "$$APPLICATION" = "websitewidgetbrowser" ]; then \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/demo $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/script $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/*.js $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/*.css $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/index.html $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
		else \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/build/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
		fi; \
	done

################################################################################
# COMPONENTS TARGETS
################################################################################

components-publish:
	@echo "  * Syncing components..."
	@for COMPONENT in $(COMPONENTS); do \
		echo "    - $$COMPONENT..."; \
		if [ "$$COMPONENT" = "testrunner" ]; then \
			$(CMD_SYNC_ONLINE) component/testrunner/build/script/$$COMPONENT-portable.js $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$COMPONENT/script/$$COMPONENT-portable.js || exit 1; \
		elif [ "$$COMPONENT" = "website" ]; then \
			WS="component/standalone/$$COMPONENT/script"; \
			for F in `echo $$WS/q*.js $$WS/indigo.css`; do \
				L=`basename $$F`; \
				if [[ "$$L" =~ 'q-source' ]] ; then \
					continue; \
				fi; \
				$(call make_versioned,L) \
				$(CMD_SYNC_ONLINE) $$F $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/framework/$$L || exit 1; \
			done; \
			$(CMD_SYNC_ONLINE) component/standalone/$$COMPONENT/script/$(WEBSITE_MODULES_ZIP) $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/framework || exit 1; \
			$(CMD_SYNC_ONLINE) component/standalone/$$COMPONENT/script/$(WEBSITE_MODULES_MIN_ZIP) $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/framework || exit 1; \
			$(CMD_SYNC_ONLINE) component/standalone/$$COMPONENT/api/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$COMPONENT-api || exit 1; \
			$(CMD_SYNC_ONLINE) component/standalone/$$COMPONENT/test/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$COMPONENT-tests || exit 1; \
		elif [ "$$COMPONENT" = "server" ]; then \
			for F in `echo component/standalone/$$COMPONENT/script/qx-oo*.js`; do \
				L=`basename $$F`; \
				if [ "$$COMPONENT" == "website" ]; then \
					if [[ "$$L" =~ 'q-source' ]] ; then \
						continue; \
					fi; \
				fi; \
				$(call make_versioned,L) \
				$(CMD_SYNC_ONLINE) $$F $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/framework/$$L || exit 1; \
			done; \
		fi; \
	done

################################################################################
# PUBLISH TARGETS
################################################################################

publish-build: grunt-setup build-apps build-components publish-build-q-zip tutorials-build framework-build resources-build resources-framework-build manual-build

##
# "q-core.js" -> "q-core-3.1.js" (also for .min.js files)
#
# text expansion macro that works also with shell vars within recipes
# syntax: $(call make_versioned,L)
#
make_versioned = \
	_ext_=$$(echo $${$(1)} | sed -r -e 's/^([[:alnum:]-]+)(\.min)?(\.[^.]+)$$/\2\3/'); \
	_base_=$$(echo $${$(1)} | sed -r -e 's/^([[:alnum:]-]+)(\.min)?(\.[^.]+)$$/\1/'); \
	$(1)="$${_base_}$(WEBSITE_VERSION_STR)$${_ext_}";

publish-build-q-zip:
	@( cd component/standalone/website; \
		D=`mktemp -d --tmpdir=.`; \
		mkdir $$D/script; \
		for F in $(WEBSITE_MODULES); do \
			for FF in `echo script/q-$$F.* script/*.css`; do \
				L=`basename $$FF`; \
				$(call make_versioned,L) \
				$(CMD_SYNC_OFFLINE) $$FF $$D/script/$$L; \
			done; \
		done; \
		shopt -s extglob; \
		rm -f script/$(WEBSITE_MODULES_ZIP) script/$(WEBSITE_MODULES_MIN_ZIP); \
		eval "$(CMD_ZIP) -qj script/$(WEBSITE_MODULES_ZIP) $$D/script/!(*.min).js" $$D/script/*.css || exit 1; \
		eval "$(CMD_ZIP) -qj script/$(WEBSITE_MODULES_MIN_ZIP) $$D/script/*.min.js" $$D/script/*.css  || exit 1; \
		rm -fr $$D; \
	)

publish-check: check-banner check-apps check-components framework-check manual-check resources-check resources-framework-check
	@echo "    - Looks good"

check-banner:
	@echo "  * Checking kit is complete..."

check-apps:
	@for TARGET in $(APPLICATIONS); do \
		if [ "$$TARGET" = "mobileshowcase" ] ; then \
			F="application/$$TARGET/build-indigo/script/$$TARGET.js"; \
		elif [ "$$TARGET" = "todo" ] ; then \
			F="application/$$TARGET/$$TARGET.js"; \
		elif [ "$$TARGET" = "websitewidgetbrowser" ] ; then \
			F="application/$$TARGET/script/indigo.css"; \
		else \
			F="application/$$TARGET/build/script/$$TARGET.js"; \
		fi; \
		[ -s $$F ] || [ "$$TARGET" = "widgetbrowser" ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
	done

check-components:
	@for TARGET in $(COMPONENTS); do \
		if [ "$$TARGET" = "testrunner" ]; then \
			F="component/$$TARGET/build/script/$$TARGET.js"; \
			[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
			F="component/testrunner/build/script/$$TARGET-portable.js"; \
			[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
		elif [ "$$TARGET" = "website" ]; then \
			F="component/standalone/$$TARGET/script/q.js"; \
			[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
			F="component/standalone/$$TARGET/script/q.min.js"; \
			[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
			for MODULE in $(WEBSITE_MODULES); do \
				F="component/standalone/$$TARGET/script/q-$$MODULE.js"; \
				[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
				F="component/standalone/$$TARGET/script/q-$$MODULE.min.js"; \
				[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
			done; \
			F="component/standalone/$$TARGET/script/$(WEBSITE_MODULES_ZIP)"; \
			[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
			F="component/standalone/$$TARGET/script/$(WEBSITE_MODULES_MIN_ZIP)"; \
			[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
		elif [ "$$TARGET" = "server" ]; then \
			F="component/standalone/$$TARGET/script/qx-oo.min.js"; \
			[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
			F="component/standalone/$$TARGET/script/qx-oo.js"; \
			[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
		fi; \
	done

publish-index:
	@echo "  * Preparing index.html..."
	@$(CMD_MKDIR) temp/
	@cat tool/admin/release/index.html | \
		sed 's/class="local"/class="local hide"/g' | \
		sed 's/ class="publish"//g' > temp/index.html
	@echo "  * Syncing index.html..."
	@$(CMD_SYNC_ONLINE) temp/index.html $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/
	@$(CMD_REMOVE) temp

ifeq ($(DO_RELEASE),)
##
# a publish-production target that only syncs the current version on the production
# server instead of the entire /demo/ etc. folders (should be much faster)
publish-production:
	@echo "  * Pushing version to production host..."
	@# devel backup
	@echo "    - Pushing devel backup..."
	@ssh -A $(STAGING_HOST) $(CMD_SYNC_ONLINE) --verbose /var/www/qooxdoo/demo/0.0.devel_backlog/ $(PRODUCTION_HOST):/var/www/qooxdoo/demo/0.0.devel_backlog/
	@# demos
	@echo "    - Pushing demos..."
	@ssh -A $(STAGING_HOST) $(CMD_SYNC_ONLINE) --verbose /var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/ $(PRODUCTION_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/
	@# manual
	@echo "    - Pushing manual..."
	@ssh -A $(STAGING_HOST) $(CMD_SYNC_ONLINE) --verbose /var/www/qooxdoo/manual/$(FRAMEWORK_VERSION)/ $(PRODUCTION_HOST):/var/www/qooxdoo/manual/$(FRAMEWORK_VERSION)/
else
##
# Syncs the entire .../demo/ and .../manual/ trees to production.
publish-production:
	@echo "  * Pushing to production host..."
	@ssh -A $(STAGING_HOST) /var/www/qooxdoo/bin/webtechfe01.mirror.sh
endif


publish-backup:
	@echo "  * Backing up devel version on server; this will take some time..."
	@ssh $(STAGING_HOST) "$(CMD_SYNC_BACKUP) /var/www/qooxdoo/demo/devel /var/www/qooxdoo/demo/0.0.devel_backlog/"

publish-backup-www:
	@echo "  * Backing up qooxdoo.org (e.g. wordpress, dokuwiki, bugzilla contents and apache config) ..."
	@ssh -A $(STAGING_HOST) $(CMD_SYNC_BACKUP_WWW) $(PRODUCTION_HOST):/home/qooxdoo/backups /home/qooxdoo/backups/from_remote

# Putting components after framework, to be able to add to testrunner/script/testrunner-portable.js
publish-staging: publish-check publish-backup publish-index framework-publish apps-publish components-publish tutorials-publish resources-publish manual-publish publish-backup-www

publish: publish-staging publish-production

