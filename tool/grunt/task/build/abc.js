qx.Bootstrap.define("qx.Interface",{statics:{define:function(name,config){if(config){config.extend&&"Array"!==qx.Bootstrap.getClass(config.extend)&&(config.extend=[config.extend]),qx.core.Environment.get("qx.debug")&&this.__validateConfig(name,config);var iface=config.statics?config.statics:{};config.extend&&(iface.$$extends=config.extend),config.properties&&(iface.$$properties=config.properties),config.members&&(iface.$$members=config.members),config.events&&(iface.$$events=config.events)}else var iface={};return iface.$$type="Interface",iface.name=name,iface.toString=this.genericToString,iface.basename=qx.Bootstrap.createNamespace(name,iface),qx.Interface.$$registry[name]=iface,iface},getByName:function(name){return this.$$registry[name]},isDefined:function(name){return void 0!==this.getByName(name)},getTotalNumber:function(){return qx.Bootstrap.objectGetLength(this.$$registry)},flatten:function(ifaces){if(!ifaces)return[];for(var list=ifaces.concat(),i=0,l=ifaces.length;l>i;i++)ifaces[i].$$extends&&list.push.apply(list,this.flatten(ifaces[i].$$extends));return list},__checkMembers:function(object,clazz,iface,wrap,shouldThrow){var members=iface.$$members;if(members)for(var key in members)if(qx.Bootstrap.isFunction(members[key])){var isPropertyMethod=this.__isPropertyMethod(clazz,key),hasMemberFunction=isPropertyMethod||qx.Bootstrap.isFunction(object[key]);if(!hasMemberFunction){if(shouldThrow)throw new Error('Implementation of method "'+key+'" is missing in class "'+clazz.classname+'" required by interface "'+iface.name+'"');return!1}var shouldWrapFunction=wrap===!0&&!isPropertyMethod&&!qx.util.OOUtil.hasInterface(clazz,iface);shouldWrapFunction&&(object[key]=this.__wrapInterfaceMember(iface,object[key],key,members[key]))}else if(void 0===typeof object[key]&&"function"!=typeof object[key]){if(shouldThrow)throw new Error('Implementation of member "'+key+'" is missing in class "'+clazz.classname+'" required by interface "'+iface.name+'"');return!1}return shouldThrow?void 0:!0},__isPropertyMethod:function(clazz,methodName){var match=methodName.match([object Object]);if(!match)return!1;var propertyName=qx.Bootstrap.firstLow(match[2]),isPropertyMethod=qx.util.OOUtil.getPropertyDefinition(clazz,propertyName);if(!isPropertyMethod)return!1;var isBoolean="is"==match[0]||"toggle"==match[0];return isBoolean?"Boolean"==qx.util.OOUtil.getPropertyDefinition(clazz,propertyName).check:!0},__checkProperties:function(clazz,iface,shouldThrow){if(iface.$$properties)for(var key in iface.$$properties)if(!qx.util.OOUtil.getPropertyDefinition(clazz,key)){if(shouldThrow)throw new Error('The property "'+key+'" is not supported by Class "'+clazz.classname+'"!');return!1}return shouldThrow?void 0:!0},__checkEvents:function(clazz,iface,shouldThrow){if(iface.$$events)for(var key in iface.$$events)if(!qx.util.OOUtil.supportsEvent(clazz,key)){if(shouldThrow)throw new Error('The event "'+key+'" is not supported by Class "'+clazz.classname+'"!');return!1}return shouldThrow?void 0:!0},assertObject:function(object,iface){var clazz=object.constructor;this.__checkMembers(object,clazz,iface,!1,!0),this.__checkProperties(clazz,iface,!0),this.__checkEvents(clazz,iface,!0);var extend=iface.$$extends;if(extend)for(var i=0,l=extend.length;l>i;i++)this.assertObject(object,extend[i])},assert:function(clazz,iface,wrap){this.__checkMembers(clazz.prototype,clazz,iface,wrap,!0),this.__checkProperties(clazz,iface,!0),this.__checkEvents(clazz,iface,!0);var extend=iface.$$extends;if(extend)for(var i=0,l=extend.length;l>i;i++)this.assert(clazz,extend[i],wrap)},objectImplements:function(object,iface){var clazz=object.constructor;if(!this.__checkMembers(object,clazz,iface)||!this.__checkProperties(clazz,iface)||!this.__checkEvents(clazz,iface))return!1;var extend=iface.$$extends;if(extend)for(var i=0,l=extend.length;l>i;i++)if(!this.objectImplements(object,extend[i]))return!1;return!0},classImplements:function(clazz,iface){if(!this.__checkMembers(clazz.prototype,clazz,iface)||!this.__checkProperties(clazz,iface)||!this.__checkEvents(clazz,iface))return!1;var extend=iface.$$extends;if(extend)for(var i=0,l=extend.length;l>i;i++)if(!this.has(clazz,extend[i]))return!1;return!0},genericToString:function(){return"[Interface "+this.name+"]"},$$registry:{},__wrapInterfaceMember:qx.core.Environment.select("qx.debug",{"true":function(iface,origFunction,functionName,preCondition){function wrappedFunction(){return preCondition.apply(this,arguments),origFunction.apply(this,arguments)}return origFunction.wrapper=wrappedFunction,wrappedFunction},"default":function(){}}),__allowedKeys:qx.core.Environment.select("qx.debug",{"true":{extend:"object",statics:"object",members:"object",properties:"object",events:"object"},"default":null}),__validateConfig:qx.core.Environment.select("qx.debug",{"true":function(name,config){if(qx.core.Environment.get("qx.debug")){var allowed=this.__allowedKeys;for(var key in config){if(void 0===allowed[key])throw new Error('The configuration key "'+key+'" in class "'+name+'" is not allowed!');if(null==config[key])throw new Error("Invalid key '"+key+"' in interface '"+name+"'! The value is undefined/null!");if(null!==allowed[key]&&typeof config[key]!==allowed[key])throw new Error('Invalid type of key "'+key+'" in interface "'+name+'"! The type of the key must be "'+allowed[key]+'"!')}for(var maps=["statics","members","properties","events"],i=0,l=maps.length;l>i;i++){var key=maps[i];if(void 0!==config[key]&&(-1!=["Array","RegExp","Date"].indexOf(qx.Bootstrap.getClass(config[key]))||void 0!==config[key].classname))throw new Error('Invalid key "'+key+'" in interface "'+name+'"! The value needs to be a map!')}if(config.extend)for(var i=0,a=config.extend,l=a.length;l>i;i++){if(null==a[i])throw new Error("Extends of interfaces must be interfaces. The extend number '"+i+"1' in interface '"+name+"' is undefined/null!");if("Interface"!==a[i].$$type)throw new Error("Extends of interfaces must be interfaces. The extend number '"+i+"1' in interface '"+name+"' is not an interface!")}if(config.statics)for(var key in config.statics){if(key.toUpperCase()!==key)throw new Error('Invalid key "'+key+'" in interface "'+name+'"! Static constants must be all uppercase.');switch(typeof config.statics[key]){case"boolean":case"string":case"number":break;default:throw new Error('Invalid key "'+key+'" in interface "'+name+'"! Static constants must be all of a primitive type.')}}}},"default":function(){}})}});
