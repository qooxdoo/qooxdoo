################################################################################
#
#  qooxdoo - the new era of web development
#
#  http://qooxdoo.org
#
#  Copyright:
#    2006-2008 1&1 Internet AG, Germany, http://www.1and1.org
#
#  License:
#    LGPL: http://www.gnu.org/licenses/lgpl.html
#    EPL: http://www.eclipse.org/org/documents/epl-v10.php
#    See the LICENSE file in the project's top-level directory for details.
#
#  Authors:
#    * Sebastian Werner (wpbasti)
#    * Andreas Ecker (ecker)
#    * Fabian Jakobs (fjakobs)
#    * Thomas Herchenroeder (thron7)
#
################################################################################

################################################################################
# VARIABLES
################################################################################

# Ubuntu's /bin/sh struggles with 'time' (bug#4398)
SHELL = /bin/bash

FRAMEWORK_VERSION := $(shell cat version.txt)
FRAMEWORK_SVNINFO := $(shell python tool/admin/bin/svninfo.py .)

CMD_LINE = echo "----------------------------------------------------------------------------"
CMD_NICE = nice -n 10
export PYTHONPATH = $(CURDIR)/tool/pylib
CMD_PYTHON = $(CMD_NICE) python -t -O
CMD_REMOVE = $(CMD_NICE) rm -rf
CMD_DIR = $(CMD_NICE) mkdir -p
CMD_FIND = $(CMD_NICE) find
CMD_ZIP = $(CMD_NICE) zip
CMD_SVN = $(CMD_NICE) svn
CMD_ZIP_CREATE = $(CMD_ZIP) -rq
CMD_ANY2UNIX = | xargs $(CMD_PYTHON) tool/pylib/misc/textutil.py --command any2Unix
CMD_MKEXEC = $(CMD_NICE) chmod a+rx
CMD_GENERATOR := $(CMD_PYTHON) "$(CURDIR)/tool/bin/generator.py"

STAGING_HOST = qooxdoo@webtechfe-test01.schlund.de

FILES_TEXT = \( -name "*.py" -o -name "*.sh" -o -name "*.js" -o -name "*.html" -o -name "*.css" -o -name "*.xml" -o -name Makefile -o -name AUTHORS -o -name LICENSE -o -name README -o -name RELEASENOTES -o -name TODO \)
FILES_TEMP = \( -name "*.rej" -o -name "*.orig" -o -name "*.pyc" -o -name "*.pyo" -o -name "*.bak" -o -name "*.old" -o -name "*~" -o -name "messages.pot" \)
FILES_EXEC = \( -name "*.py" -o -name "*.sh" \)

CMD_SYNC_ONLINE = $(CMD_NICE) rsync --checksum --recursive --delete --inplace --links --safe-links --exclude .svn
CMD_SYNC_OFFLINE = $(CMD_NICE) rsync --recursive --delete --inplace --links --safe-links --exclude .svn
CMD_SYNC_BACKUP = $(CMD_NICE) rsync --recursive --delete --inplace --copy-links --exclude .svn

# Directories
RELEASE_BUILD = release/temp/build/qooxdoo-$(FRAMEWORK_VERSION)-build
RELEASE_SDK = release/temp/sdk/qooxdoo-$(FRAMEWORK_VERSION)-sdk

APPLICATIONS = feedreader portal mobileshowcase playground showcase widgetbrowser demobrowser featureconfigeditor
COMPONENTS = apiviewer testrunner inspector
FRAMEWORK_TARGETS = api test qxoo-build qxoo-noopt


################################################################################
# RELEASE TARGETS
################################################################################

release: release-sdk

release-sdk: distclean release-sdk-sans-clean
release-sdk-sans-clean: release-sdk-info apiviewer showcase build-docs release-sdk-svn-collect release-sdk-archive

release-sdk-info:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING SDK VERSION OF RELEASE $(FRAMEWORK_VERSION)"
	@echo "****************************************************************************"


release-sdk-svn-collect:
	@echo
	@echo "  SYNCHRONISATION OF SDK RELEASE"
	@echo "----------------------------------------------------------------------------"

	@echo "  * Extracting sources..."
	@$(CMD_DIR) `dirname $(RELEASE_SDK)`
	@$(CMD_SVN) export . $(RELEASE_SDK)

	@echo "  * Preparing index.html..."
	@cat ./index.html | \
		sed 's/class="local"/class="local hide"/g' | \
		sed 's/ class="publish"//g' > $(RELEASE_SDK)/index.html

	@echo "  * Synchronizing applications/components..."
	@$(CMD_REMOVE) $(RELEASE_SDK)/component/buildtool/
	@$(CMD_REMOVE) $(RELEASE_SDK)/component/toolbox/
	@$(CMD_REMOVE) $(RELEASE_SDK)/application/performance/
	@$(CMD_SYNC_OFFLINE) application/showcase/build/* $(RELEASE_SDK)/application/showcase/build

	@echo "  * Synchronizing framework..."
	@$(CMD_SYNC_OFFLINE) framework/api/* $(RELEASE_SDK)/framework/api

	@echo "  * Synchronizing tools..."
	@$(CMD_REMOVE) $(RELEASE_SDK)/tool/admin/

	@echo "  * Switching to Unix line endings..."
	@$(CMD_FIND) $(RELEASE_SDK) $(FILES_TEXT) $(CMD_ANY2UNIX)

	@echo "  * Synchronizing documentation..."
	@$(CMD_REMOVE) $(RELEASE_SDK)/documentation/manual/
	@$(CMD_DIR) $(RELEASE_SDK)/documentation/manual/
	@$(CMD_SYNC_OFFLINE) documentation/manual/build/html/* $(RELEASE_SDK)/documentation/manual/
	@$(CMD_SYNC_OFFLINE) documentation/manual/build/latex/qooxdoo.pdf $(RELEASE_SDK)/documentation/manual/



release-sdk-archive:
	@echo "  * Generating zip archive..."
	@cd release/temp/sdk; $(CMD_REMOVE) ../../qooxdoo-$(FRAMEWORK_VERSION)-sdk.zip; $(CMD_ZIP_CREATE) ../../qooxdoo-$(FRAMEWORK_VERSION)-sdk.zip qooxdoo-$(FRAMEWORK_VERSION)-sdk

	@echo "  * Cleaning up..."
	@rm -rf release/temp


################################################################################
# APIVIEWER TARGETS
################################################################################

info-apiviewer:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING APIVIEWER"
	@echo "****************************************************************************"


apiviewer: info-apiviewer exec-apiviewer-build

exec-apiviewer-build:
	@time ( cd framework && $(CMD_GENERATOR) api ) || exit 1


################################################################################
# SHOWCASE TARGETS
################################################################################

info-showcase:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING SHOWCASE"
	@echo "****************************************************************************"


showcase: info-showcase exec-showcase-build

exec-showcase-build:
	@time ( cd application/showcase && $(CMD_GENERATOR) build ) || exit 1
  
  
################################################################################
# INSPECTOR TARGETS
################################################################################

info-inspector:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING INSPECTOR COMPONENT"
	@echo "****************************************************************************"


inspector: info-inspector exec-inspector-build

exec-inspector-build:
	@time ( cd component/inspector && $(CMD_GENERATOR) build ) || exit 1



################################################################################
# TESTRUNNER TARGETS
################################################################################

info-testrunner:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING TESTRUNNER COMPONENT"
	@echo "****************************************************************************"


testrunner: info-testrunner exec-testrunner-build

exec-testrunner-build:
	@time ( cd component/testrunner && $(CMD_GENERATOR) build ) || exit 1



################################################################################
# SKELETON TARGETS
################################################################################

SKELETON_TEMP = temp-skeleton
SKELETON_FILES = generate.py config.json Manifest.json source/class source/resource source/translation source/index.html

info-skeleton:
	@echo
	@echo "****************************************************************************"
	@echo "  GENERATING SKELETON"
	@echo "****************************************************************************"

skeleton: info-skeleton exec-skeleton-collect exec-skeleton-archive

exec-skeleton-collect:
	@echo "  * Copying info files..."
	@$(CMD_DIR) $(SKELETON_TEMP)/qooxdoo-$(FRAMEWORK_VERSION)-skeleton
	@for FILE in `find ../ -maxdepth 1 -type f -name "*.txt"`; do \
	  echo "    - `basename $$FILE`"; \
	  cp -f $$FILE $(SKELETON_TEMP)/qooxdoo-$(FRAMEWORK_VERSION)-skeleton; \
	done

	@echo "  * Collecting skeleton files..."
	@$(CMD_DIR) $(SKELETON_TEMP)/qooxdoo-$(FRAMEWORK_VERSION)-skeleton
	@for FILE in $(SKELETON_FILES); do \
    	echo "    - $$FILE"; \
    	$(CMD_DIR) `dirname $(SKELETON_TEMP)/qooxdoo-$(FRAMEWORK_VERSION)-skeleton/skeleton/$$FILE`; \
	  	$(CMD_SYNC_OFFLINE) component/skeleton/$$FILE `dirname $(SKELETON_TEMP)/qooxdoo-$(FRAMEWORK_VERSION)-skeleton/skeleton/$$FILE`; \
  	done

exec-skeleton-archive:
	@echo "  * Cleaning up target folders..."
	@$(CMD_FIND) $(SKELETON_TEMP) $(FILES_TEMP) -exec $(CMD_REMOVE) {} \;

	@echo "  * Switching to Unix line endings..."
	@$(CMD_FIND) $(SKELETON_TEMP) $(FILES_TEXT) $(CMD_ANY2UNIX)

	@echo "  * Fixing executables..."
	@$(CMD_FIND) $(SKELETON_TEMP) $(FILES_EXEC) -exec $(CMD_MKEXEC) {} \;

	@echo "  * Building skeleton archive..."
	@cd $(SKELETON_TEMP); $(CMD_REMOVE) ../component/qooxdoo-$(FRAMEWORK_VERSION)-skeleton.zip; $(CMD_ZIP_CREATE) ../component/qooxdoo-$(FRAMEWORK_VERSION)-skeleton.zip qooxdoo-$(FRAMEWORK_VERSION)-skeleton

	@echo "  * Cleaning up temporary folder..."
	@$(CMD_REMOVE) $(SKELETON_TEMP)

	@echo "  * Created component/qooxdoo-$(FRAMEWORK_VERSION)-skeleton.zip"


################################################################################
# BASIC TARGETS
################################################################################

distclean:
	@for APPLICATION in $(APPLICATIONS); do ( cd application/$$APPLICATION && $(CMD_GENERATOR) distclean ) || exit 1; done
	@for APPLICATION in $(COMPONENTS); do ( cd component/$$APPLICATION && $(CMD_GENERATOR) distclean ) || exit 1; done
	@cd framework && $(CMD_GENERATOR) distclean
	@$(CMD_REMOVE) application/*.zip
	@$(CMD_REMOVE) release

build: build-apps build-components
build-apps:
	@time for APPLICATION in $(APPLICATIONS); do \
		if [ "$$APPLICATION" = "feedreader" ]; then \
			( cd application/$$APPLICATION && $(CMD_GENERATOR) build,build-mobile ) || exit 1; \
		else \
			( cd application/$$APPLICATION && $(CMD_GENERATOR) build ) || exit 1; \
		fi; \
	done

build-components:
	@time for APPLICATION in $(COMPONENTS); do ( cd component/$$APPLICATION && $(CMD_GENERATOR) build ) || exit 1; done

build-framework:
	@for TARGET in $(FRAMEWORK_TARGETS); do ( cd framework && $(CMD_GENERATOR) $$TARGET ) || exit 1; done

source: source-apps source-components
source-apps:
	@time for APPLICATION in $(APPLICATIONS); do ( cd application/$$APPLICATION && $(CMD_GENERATOR) source ) || exit 1; done
	@time for APPLICATION in $(APPLICATIONS); do \
		if [ "$$APPLICATION" = "feedreader" ]; then \
			( cd application/$$APPLICATION && $(CMD_GENERATOR) source,source-mobile ) || exit 1; \
		else \
			( cd application/$$APPLICATION && $(CMD_GENERATOR) source ) || exit 1; \
		fi; \
	done

source-components:
	@time for APPLICATION in $(COMPONENTS); do ( cd component/$$APPLICATION && $(CMD_GENERATOR) source ) || exit 1; done


################################################################################
# DOCUMENTATION TARGETS
################################################################################

build-docs-html:
	@(cd documentation/manual && make html)

build-docs-pdf:
	@(cd documentation/manual && make latex)
	@(cd documentation/manual/build/latex && make all-pdf)

build-docs: build-docs-html build-docs-pdf

publish-docs:
	@echo "  * Publishing HTML docs to staging host..."
	@$(CMD_SYNC_ONLINE) documentation/manual/build/html/* $(STAGING_HOST):/var/www/qooxdoo/manual/$(FRAMEWORK_VERSION)/
	@echo "  * Publishing PDF doc to staging host..."
	@$(CMD_SYNC_ONLINE) documentation/manual/build/latex/qooxdoo.pdf $(STAGING_HOST):/var/www/qooxdoo/manual/$(FRAMEWORK_VERSION)/

check-docs: check-docs-html check-docs-pdf

check-docs-html:
	@for TARGET in `echo "index.html pages/core.html pages/development.html pages/gui_toolkit.html"`; do F="documentation/manual/build/html/$$TARGET"; [ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); done

check-docs-pdf:
	@F="documentation/manual/build/latex/qooxdoo.pdf"; [ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 );

################################################################################
# PUBLISH TARGETS
################################################################################

publish-build: build-apps inspector testrunner build-framework build-docs

publish-check: check-banner check-apps check-components check-framework check-docs
	@echo "    - Looks good"

check-banner:
	@echo "  * Checking kit is complete..."

check-apps:
	@for TARGET in $(APPLICATIONS); do \
    if [ "$$TARGET" = "featureconfigeditor" ] ; then \
      F="application/$$TARGET/build/script/fce.js"; \
    else \
      F="application/$$TARGET/build/script/$$TARGET.js"; \
    fi; \
    [ -s $$F ] || [ "$$TARGET" = "widgetbrowser" ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
  done

check-components:
	@for TARGET in $(COMPONENTS); do \
		if [ "$$TARGET" = "inspector" ]; then \
			F="component/$$TARGET/build/script/$$TARGET.js"; \
			[ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
		fi; \
	done

check-framework:
	@for TARGET in $(FRAMEWORK_TARGETS); do \
		if [ "$$TARGET" = "qxoo-build" ]; then \
			F="framework/build/script/qx-oo.js"; [ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
		elif [ "$$TARGET" = "qxoo-noopt" ]; then \
			F="framework/build/script/qx-oo-noopt.js"; [ -s $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
		else \
			F="framework/$$TARGET/script"; [ -d $$F ] || ( echo "Missing $$F; run 'make publish-build' first!"; exit 1 ); \
		fi; \
	done

publish-index:
	@echo "  * Preparing index.html..."
	@$(CMD_DIR) temp/
	@cat tool/data/publish/index.html | \
		sed 's/class="local"/class="local hide"/g' | \
		sed 's/ class="publish"//g' > temp/index.html
	@echo "  * Syncing index.html..."
	@$(CMD_SYNC_ONLINE) temp/index.html $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/
	@$(CMD_REMOVE) temp

publish-apps:
	@echo "  * Syncing applications..."
	@for APPLICATION in $(APPLICATIONS); do \
		echo "    - $$APPLICATION..."; \
		$(CMD_SYNC_ONLINE) application/$$APPLICATION/build/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
		if [ "$$APPLICATION" = "feedreader" ]; then \
			echo "    - $$APPLICATION-mobile..."; \
			$(CMD_SYNC_ONLINE) application/$$APPLICATION/build-mobile/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION-mobile || exit 1; \
		fi; \
	done
	@echo "  * Syncing components..."
	@for APPLICATION in $(COMPONENTS); do \
		if [ "$$APPLICATION" = "inspector" ]; then \
			echo "    - $$APPLICATION..."; \
			$(CMD_SYNC_ONLINE) component/$$APPLICATION/build/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/$$APPLICATION || exit 1; \
		fi; \
	done
	@echo "  * Syncing framework..."
	@ssh $(STAGING_HOST) "$(CMD_DIR) /var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/framework"
	@for APPLICATION in $(FRAMEWORK_TARGETS); do \
	  echo "    - $$APPLICATION..."; \
		if [ "$$APPLICATION" = "api" ]; then \
			$(CMD_SYNC_ONLINE) framework/$$APPLICATION/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/apiviewer || exit 1; \
		fi; \
		if [ "$$APPLICATION" = "test" ]; then \
			$(CMD_SYNC_ONLINE) framework/$$APPLICATION/* $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/testrunner || exit 1; \
		fi; \
		if [ "$$APPLICATION" = "qxoo-build" ]; then \
			$(CMD_SYNC_ONLINE) framework/build/script/qx-oo.js $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/framework || exit 1; \
		fi; \
		if [ "$$APPLICATION" = "qxoo-noopt" ]; then \
			$(CMD_SYNC_ONLINE) framework/build/script/qx-oo-noopt.js $(STAGING_HOST):/var/www/qooxdoo/demo/$(FRAMEWORK_VERSION)/framework || exit 1; \
		fi; \
	done

publish-production:
	@echo "  * Pushing to production host..."
	@ssh -A $(STAGING_HOST) /var/www/qooxdoo/bin/webtechfe01.mirror.sh

publish-backup:
	@echo "  * Backing up devel version on server; this will take some time..."
	@ssh $(STAGING_HOST) "$(CMD_SYNC_BACKUP) /var/www/qooxdoo/demo/devel /var/www/qooxdoo/demo/0.0.devel_backlog/"

publish-staging: publish-check publish-backup publish-index publish-apps publish-docs

publish: publish-staging publish-production

